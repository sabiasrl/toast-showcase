version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: toast-postgres
    environment:
      POSTGRES_DB: toast_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - toast-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Apache Pulsar (Development)
  pulsar-standalone:
    image: apachepulsar/pulsar:3.0.0
    container_name: toast-pulsar
    command: bin/pulsar standalone
    ports:
      - "6650:6650"
      - "8080:8080"
    environment:
      PULSAR_MEM: "1G"
    volumes:
      - pulsar_data:/pulsar/data
      - pulsar_conf:/pulsar/conf
    networks:
      - toast-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/admin/v2/brokers/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ (Production)
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: toast-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - toast-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: toast-mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - toast-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: toast-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - toast-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: toast-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - toast-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: toast-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - toast-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
  pulsar_data:
  pulsar_conf:
  rabbitmq_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  toast-network:
    driver: bridge 